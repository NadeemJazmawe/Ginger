name: Ginger Build

on:
  workflow_call:
      
  # pull_request:
  #   branches: 
  #     - master
  #     - Features/Linux-Migration
  #     - Releases/*
  #     - Releases/*/*

  # push:
  #   branches:
  #     - '**'

jobs:
    Build:
        name: ${{ matrix.os }}
        runs-on: ${{ matrix.os }}
        strategy:
            matrix:
                os: [ubuntu-latest, windows-latest, macos-latest]
        env:
            BUILD_CONFIGURATION: Release
      
        steps:
# ------------------------------------------------------------------------------------------------------
# Createin version Tag & Number variables - only for CD Job
# ------------------------------------------------------------------------------------------------------
        -   name: Restore Version text file
            if: ${{github.workflow == 'CD'}}  
            uses: actions/cache@v3.2.6
            with:
                path: ./version.txt
                key: cache-version-${{ github.run_number }}
                enableCrossOsArchive:
                    true
            
        -   name: Create variables from Artifacts file
            if: ${{github.workflow == 'CD'}} 
            shell: bash
            run: |
                source version.txt
                echo $TAG
                echo "gingernumber=$NUMBER" >> $GITHUB_ENV
                echo "gingertag=$TAG" >> $GITHUB_ENV
          
# ------------------------------------------------------------------------------------------------------
# Copy Ginger repo
# ------------------------------------------------------------------------------------------------------
        -   uses: actions/checkout@v3

# ------------------------------------------------------------------------------------------------------
# Update Ginger Version 
# ------------------------------------------------------------------------------------------------------
        -   name: 'Update Assembly'
            if: ${{github.workflow == 'CD'}} 
            run: |
                $save=((Get-Content .\Ginger\GingerCoreCommon/GingerCoreCommon.csproj) -replace '<AssemblyVersion>*.*.*.*</AssemblyVersion>','<AssemblyVersion>${{ env.gingernumber}}</AssemblyVersion>')  -replace '<FileVersion>*.*.*.*</FileVersion>','<FileVersion>${{ env.gingernumber}}</FileVersion>'
                echo $save > .\Ginger\GingerCoreCommon/GingerCoreCommon.csproj
                $save=(Get-Content .\Ginger\GingerInstallerScript.iss) -replace '#define MyAppVersion "*.*.*.*"','#define MyAppVersion "${{ env.gingernumber}}"'
                echo $save > .\Ginger\GingerInstallerScript.iss
                $save=(Get-Content .\Ginger\GingerCore\Drivers\JavaDriverLib\GingerJavaAgent\agent\com\amdocs\ginger\GingerAgent.java) -replace 'public static final String GINGER_JAVA_AGENT_VERSION="*.*.*.*";','public static final String GINGER_JAVA_AGENT_VERSION="${{ env.gingernumber}}";'
                echo $save > .\Ginger\GingerCore\Drivers\JavaDriverLib\GingerJavaAgent\agent\com\amdocs\ginger\GingerAgent.java
                $save=(Get-Content .\Ginger\GingerInstallerScriptGithub.iss) -replace '#define MyAppVersion "*.*.*.*"','#define MyAppVersion "${{ env.gingernumber}}"'
                echo $save > .\Ginger\GingerInstallerScriptGithub.iss
      
#########################################################################################################################################################                
######### for Linux and for Windows
#########################################################################################################################################################
        -   name: 'Print OS type'
            run: |
                echo "Running on ${{ runner.os }}"
# ------------------------------------------------------------------------------------------------------
# Install .Net core SDK 8.0.100
# ------------------------------------------------------------------------------------------------------
        -   name: 'Install .NET 8'
            uses: actions/setup-dotnet@v3
            with:
                dotnet-version: 8.0.100
            
# ------------------------------------------------------------------------------------------------------
# Install Nuget tool v1.0.5
# ------------------------------------------------------------------------------------------------------
        -   name: 'Setup Nuget'
            uses: Nuget/setup-nuget@v1.0.5

# ------------------------------------------------------------------------------------------------------
# Restore Ginger solution NuGet packages
# ------------------------------------------------------------------------------------------------------
        -   name: 'Restore nuget packages'
            run: nuget restore ./Ginger/Ginger.sln
        
# ------------------------------------------------------------------------------------------------------
# Build && Publish Ginger Solution
# ------------------------------------------------------------------------------------------------------
        -   name: 'Add msbuild to PATH'
            if: runner.os == 'Windows'
            uses: microsoft/setup-msbuild@v1.0.2

        -   name: 'Build Ginger Windows Solution'
            if: runner.os == 'Windows'
            run: msbuild ./Ginger/Ginger.sln /p:DebugSymbols=true /p:DebugType=full /p:Configuration=$env:BUILD_CONFIGURATION

        -   name: 'Publish GingerRuntime - Ubuntu'
            if: runner.os == 'Ubuntu'
            run: dotnet publish ./Ginger/GingerRuntime/GingerRuntime.csproj --runtime linux-x64 --self-contained  true -c Release
     
        -   name: 'Publish GingerRuntime - macOS'
            if: runner.os == 'macOS'
            run: dotnet publish ./Ginger/GingerRuntime/GingerRuntime.csproj --runtime osx-x64 --self-contained true -c Release
# ------------------------------------------------------------------------------------------------------
# Upload Artifacts 
# ------------------------------------------------------------------------------------------------------   
        -   name: Cache static site content - Windows
            id: cache_windows
            if: runner.os == 'Windows'
            uses: actions/cache@v3.2.6
            with:
                path: 
                    ./**
                key: 
                    cache-site-windows-${{github.run_number}}
                enableCrossOsArchive:
                    true

        -   name: Cache static site content - Ubuntu
            id: cache_ubuntu
            if: runner.os == 'Ubuntu'
            uses: actions/cache@v3.2.6
            with:
                path: 
                    ./**
                key: 
                    cache-site-linux-${{ github.run_number }}
                enableCrossOsArchive:
                    true
            
            
        -   name: Cache static site content - macOS
            id: cache_macos
            if: runner.os == 'macOS'
            uses: actions/cache@v3.2.6
            with:
                path: 
                    ./**
                key: 
                    cache-site-macos-${{ github.run_number }}
                enableCrossOsArchive:
                    true
            
